{{ if has_ms_di }}using Microsoft.Extensions.DependencyInjection;{{end}}

namespace {{ namespace }};

public static partial class {{ class_name }}
{
    public sealed class Handler
    {
        private readonly LoggingBehavior<{{ request_type }}, IEnumerable<User>> _loggingBehavior;
        private readonly {{ class_fully_qualified_name }}.HandleBehavior _handleBehavior;
    
        public Handler(
               LoggingBehavior<{{ request_type }}, IEnumerable<User>> loggingBehavior,
               {{ class_fully_qualified_name }}.HandleBehavior handleBehavior
        )
        {
            _loggingBehavior = loggingBehavior;
            _handleBehavior = handleBehavior;
        }
    
        public async Task<IEnumerable<User>> HandleAsync({{ request_type }} request, global::System.Threading.CancellationToken cancellationToken = default)
        {
            _loggingBehavior.InnerHandler = _handleBehavior;
            return await _loggingBehavior.HandleAsync(request, cancellationToken);
        }
    }

    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public sealed class HandleBehavior : Immediate.Handlers.Shared.Behavior<{{ request_type }}, IEnumerable<User>>
    {
        private readonly UsersService _usersService;
    
        public HandleBehavior(UsersService usersService)
        {
            _usersService = usersService;
        }
    
        public override async Task<IEnumerable<User>> HandleAsync({{ request_type }} request, global::System.Threading.CancellationToken cancellationToken)
        {
            return await {{ class_fully_qualified_name }}.HandleAsync(
                request,
                _usersService,
                cancellationToken);
        }
    }

    {{ if has_ms_di }}
    {{- raw -}}
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public static global::Microsoft.Extensions.DependencyInjection.IServiceCollection AddHandlers(global::Microsoft.Extensions.DependencyInjection.IServiceCollection services)
    {
        services.AddScoped<{{ class_fully_qualified_name }}.Handler>();
        services.AddScoped<{{ class_fully_qualified_name }}.HandleBehavior>();
        return services;
    }
    {{- endraw -}}
    {{ end }}
}
