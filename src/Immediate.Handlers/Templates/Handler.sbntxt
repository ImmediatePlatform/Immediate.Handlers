using System.ComponentModel;
{{ if has_ms_di }}using Microsoft.Extensions.DependencyInjection;{{end}}

namespace {{ namespace }};

public static partial class {{ class_name }}
{
    public sealed class Handler(
        LoggingBehavior<Query, IEnumerable<User>> loggingBehavior,
        HandleBehavior<Query, IEnumerable<User>> handleBehavior
	)
    {
        public async Task<IEnumerable<User>> HandleAsync(Query query)
        {
            loggingBehavior.InnerHandler = handleBehavior;
            return await loggingBehavior.HandleAsync(query);
        }
    }

    [EditorBrowsable(EditorBrowsableState.Never)]
    public sealed class HandleBehavior : Immediate.Handlers.Shared.Behavior<Query, IEnumerable<User>>(
        UsersService usersService
    )
    {
        public async Task<IEnumerable<User>> HandleAsync(Query query, CancellationToken token)
        {
            return await GetUsersQuery.Handle(
                query,
                usersService,
                token);
        }
    }

    {{ if has_ms_di }}
    {{- raw -}}
    [EditorBrowsable(EditorBrowsableState.Never)]
    public static IServiceCollection AddHandlers(IServiceCollection services)
    {
        services.AddScoped<GetUsersQuery.Handler>();
        services.AddScoped<GetUsersQuery.HandleBehavior>();
        return services;
    }
    {{- endraw -}}
    {{ end }}
}
