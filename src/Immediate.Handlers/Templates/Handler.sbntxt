{{ if has_ms_di }}using Microsoft.Extensions.DependencyInjection;{{end}}

namespace {{ namespace }};

public static partial class {{ class_name }}
{
    public sealed class Handler
    {
        private readonly LoggingBehavior<{{ request_type }}, {{ response_type }}> _loggingBehavior;
        private readonly {{ class_fully_qualified_name }}.HandleBehavior _handleBehavior;
    
        public Handler(
               LoggingBehavior<{{ request_type }}, {{ response_type }}> loggingBehavior,
               {{ class_fully_qualified_name }}.HandleBehavior handleBehavior)
        {
            _loggingBehavior = loggingBehavior;
            _handleBehavior = handleBehavior;
        }
    
        public async Task<{{ response_type }}> HandleAsync({{ request_type }} request, global::System.Threading.CancellationToken cancellationToken = default)
        {
            _loggingBehavior.InnerHandler = _handleBehavior;
            return await _loggingBehavior.HandleAsync(request, cancellationToken);
        }
    }

    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public sealed class HandleBehavior : Immediate.Handlers.Shared.Behavior<{{ request_type }}, {{ response_type }}>
    {
        {{~ for parameter in handler_parameters ~}}
        private readonly {{ parameter.type }} _{{ parameter.name }};
        {{~ end ~}}
    
        public HandleBehavior(
            {{~ for parameter in handler_parameters ~}}
            {{ parameter.type }} {{ parameter.name }}{{ if !for.last }},{{ end }}
            {{end}})
        {
            {{~ for parameter in handler_parameters ~}}
            _{{ parameter.name }} = {{ parameter.name }};
            {{~ end ~}}
        }
    
        public override async Task<{{ response_type }}> HandleAsync({{ request_type }} request, global::System.Threading.CancellationToken cancellationToken)
        {
            return await {{ class_fully_qualified_name }}.HandleAsync(
                request,                
                {{~ for parameter in handler_parameters ~}}
                _{{ parameter.name }},
                {{~ end ~}}
                cancellationToken);
        }
    }

    {{~ if has_ms_di ~}}
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    public static global::Microsoft.Extensions.DependencyInjection.IServiceCollection AddHandlers(global::Microsoft.Extensions.DependencyInjection.IServiceCollection services)
    {
        services.AddScoped<{{ class_fully_qualified_name }}.Handler>();
        services.AddScoped<{{ class_fully_qualified_name }}.HandleBehavior>();
        return services;
    }
    {{ end }}
}
