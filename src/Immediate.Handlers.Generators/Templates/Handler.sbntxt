{{~ if has_ms_di ~}}
using Microsoft.Extensions.DependencyInjection;

{{~ end ~}}
#pragma warning disable CS1591

{{~ if !string.empty namespace ~}}
namespace {{ namespace }};

{{~ end ~}}
partial class {{ class_name }}
{
	public sealed class Handler
	{
		private readonly {{ class_fully_qualified_name }}.HandleBehavior _handleBehavior;
		{{~ for behavior in (behaviors | array.reverse) ~}}
		private readonly {{ behavior.non_generic_type_name }}<{{ request_type }}, {{ response_type }}> _{{ behavior.registration_type_as_identifier }};
		{{~ end ~}}

		public Handler(
			{{ class_fully_qualified_name }}.HandleBehavior handleBehavior{{ if behaviors.size > 0 }},{{ end }}
			{{~ for behavior in (behaviors | array.reverse) ~}}
			{{ behavior.non_generic_type_name }}<{{ request_type }}, {{ response_type }}> {{ behavior.registration_type_as_identifier }}{{ if !for.last }},{{end }}
			{{~ end ~}}
		)
		{
			_handleBehavior = handleBehavior;
			{{~ for behavior in behaviors ~}}
			_{{ behavior.registration_type_as_identifier }} = {{ behavior.registration_type_as_identifier }};
			{{~ end ~}}

			{{~ for behavior in (behaviors | array.reverse) ~}}
			{{~ if for.first ~}}
			_{{ behavior.registration_type_as_identifier }}.SetInnerHandler(_handleBehavior);
			{{~ else ~}}
			_{{ behavior.registration_type_as_identifier }}.SetInnerHandler(_{{ behaviors[behaviors.size - for.index].registration_type_as_identifier }});
			{{~ end ~}}
			{{~ end ~}}
		}

		public async global::System.Threading.Tasks.ValueTask<{{ response_type }}> HandleAsync(
			{{ request_type }} request,
			global::System.Threading.CancellationToken cancellationToken = default
		)
		{
			{{~ if behaviors.size > 0 ~}}
			return await _{{ behaviors[0].registration_type_as_identifier }}
				.HandleAsync(request, cancellationToken)
				.ConfigureAwait(false);
			{{~ else ~}}
			return await _handleBehavior
				.HandleAsync(request, cancellationToken)
				.ConfigureAwait(false);
			{{~ end ~}}
		}
	}

	[global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
	public sealed class HandleBehavior : global::Immediate.Handlers.Shared.Behavior<{{ request_type }}, {{ response_type }}>
	{
		{{~ for parameter in handler_parameters ~}}
		private readonly {{ parameter.type }} _{{ parameter.name }};
		{{~ end ~}}

		public HandleBehavior(
			{{~ for parameter in handler_parameters ~}}
			{{ parameter.type }} {{ parameter.name }}{{ if !for.last }},{{ end }}
			{{~ end ~}}
		)
		{
			{{~ for parameter in handler_parameters ~}}
			_{{ parameter.name }} = {{ parameter.name }};
			{{~ end ~}}
		}

		public override async global::System.Threading.Tasks.ValueTask<{{ response_type }}> HandleAsync(
			{{ request_type }} request,
			global::System.Threading.CancellationToken cancellationToken
		)
		{
			return await {{ class_fully_qualified_name }}
				.{{ method_name }}(
					request,
					{{~ for parameter in handler_parameters ~}}
					_{{ parameter.name }},
					{{~ end ~}}
					cancellationToken
				)
				.ConfigureAwait(false);
		}
	}
	{{~ if has_ms_di ~}}

	[global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
	public static global::Microsoft.Extensions.DependencyInjection.IServiceCollection AddHandlers(
		global::Microsoft.Extensions.DependencyInjection.IServiceCollection services
	)
	{
		services.AddScoped<{{ class_fully_qualified_name }}.Handler>();
		services.AddScoped<{{ class_fully_qualified_name }}.HandleBehavior>();
		return services;
	}
	{{~ end ~}}
}
